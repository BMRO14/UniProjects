;#include <mega164a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <stdint.h>
;#include <math.h>
;
;// LCD I2C Definitions
;#define LCD_I2C_ADDR 0x27
;#define LCD_BACKLIGHT 0x08
;
;#ifndef TWEN
;    #define TWSTO 4
;    #define TWSTA 5
;    #define TWEN  2
;    #define TWINT 7
;#endif
;
;#define F_CPU 20000000UL
;#define BAUD 9600
;#define UBRR_VALUE ((F_CPU / (16UL * BAUD)) - 1)
;#define RL_VALUE 10000.0
;#define R0_VALUE 8000.0
;#define A_CONST 0.4
;#define B_CONST 0.4
;#define ADC_MAX 1023
;
;void uart_init(void) {
; 0000 001B void uart_init(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001C     UBRR0H = (unsigned char)(UBRR_VALUE >> 8);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 001D     UBRR0L = (unsigned char)(UBRR_VALUE & 0xFF);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001E     UCSR0B = (1 << 3);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 001F     UCSR0C = (1 << 2) | (1 << 1);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0020 }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;void uart_send(char c) {
; 0000 0022 void uart_send(char c) {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0023     while (!(UCSR0A & (1 << 5)));
;PCODE: $0000001B VOL: 0
;	c -> Y+0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0024     UDR0 = c;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0025 }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;
;void uart_print(const char *str) {
; 0000 0027 void uart_print(const char *str) {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0028     while (*str) uart_send(*str++);
;PCODE: $00000029 VOL: 0
;	*str -> Y+0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0029 }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;void adc_init(void) {
; 0000 002B void adc_init(void) {
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 002C     ADMUX = (1 << 6);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 002D     ADCSRA = (1 << 7) | (1 << 2) | (1 << 1);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 002E }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;uint16_t adc_read(void) {
; 0000 0030 uint16_t adc_read(void) {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0031     ADCSRA |= (1 << 6);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0032     while (ADCSRA & (1 << 6));
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0033     return ADCW;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0034 }
;PCODE: $0000004E VOL: 0
;
;void I2C_Write(uint8_t data) {
; 0000 0036 void I2C_Write(uint8_t data) {
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0037     TWDR = data;
;PCODE: $00000051 VOL: 0
;	data -> Y+0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0038     TWCR = (1 << TWEN) | (1 << TWINT);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0039     while (!(TWCR & (1 << TWINT)));
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 003A }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;void LCD_I2C_Start() {
; 0000 003C void LCD_I2C_Start() {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 003D     TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 003E     while (!(TWCR & (1 << TWINT)));
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 003F }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;
;void LCD_I2C_Stop() {
; 0000 0041 void LCD_I2C_Stop() {
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0042     TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0043     delay_us(10);
;PCODE: $0000006F VOL: 0
; 0000 0044 }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;
;void LCD_I2C_Send(uint8_t data) {
; 0000 0046 void LCD_I2C_Send(uint8_t data) {
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0047     I2C_Write(data);
;PCODE: $00000074 VOL: 0
;	data -> Y+0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0048 }
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;
;void LCD_Send4Bits(uint8_t data) {
; 0000 004A void LCD_Send4Bits(uint8_t data) {
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 004B     LCD_I2C_Send(data | LCD_BACKLIGHT | 0x04);
;PCODE: $0000007C VOL: 0
;	data -> Y+0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 004C     delay_us(1);
;PCODE: $00000081 VOL: 0
; 0000 004D     LCD_I2C_Send(data | LCD_BACKLIGHT);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 004E     delay_us(50);
;PCODE: $00000086 VOL: 0
; 0000 004F }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;
;void LCD_WriteCmd(uint8_t cmd) {
; 0000 0051 void LCD_WriteCmd(uint8_t cmd) {
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0052     uint8_t high = cmd & 0xF0;
; 0000 0053     uint8_t low = (cmd << 4) & 0xF0;
; 0000 0054     LCD_I2C_Start();
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;	cmd -> Y+2
;	high -> R17
;	low -> R16
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0055     I2C_Write(LCD_I2C_ADDR << 1);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0056     LCD_Send4Bits(high);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0057     LCD_Send4Bits(low);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0058     LCD_I2C_Stop();
;PCODE: $0000009D VOL: 0
; 0000 0059     delay_ms(2);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 005A }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;
;void LCD_WriteData(uint8_t data) {
; 0000 005C void LCD_WriteData(uint8_t data) {
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 005D     uint8_t high = (data & 0xF0) | 0x01;
; 0000 005E     uint8_t low = ((data << 4) & 0xF0) | 0x01;
; 0000 005F     LCD_I2C_Start();
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;	data -> Y+2
;	high -> R17
;	low -> R16
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0060     I2C_Write(LCD_I2C_ADDR << 1);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0061     LCD_Send4Bits(high);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0062     LCD_Send4Bits(low);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0063     LCD_I2C_Stop();
;PCODE: $000000BD VOL: 0
; 0000 0064     delay_ms(2);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0065 }
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;
;void LCD_Clear() {
; 0000 0067 void LCD_Clear() {
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0068     LCD_WriteCmd(0x01);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0069     delay_ms(2);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 006A }
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;
;void LCD_SetCursor(uint8_t col, uint8_t row) {
; 0000 006C void LCD_SetCursor(uint8_t col, uint8_t row) {
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 006D     uint8_t addr = (row == 0) ? 0x80 + col : 0xC0 + col;
; 0000 006E     LCD_WriteCmd(addr);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;	col -> Y+2
;	row -> Y+1
;	addr -> R17
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 006F }
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;
;void LCD_Print(char *str) {
; 0000 0071 void LCD_Print(char *str) {
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0072     while (*str) {
;PCODE: $000000EA VOL: 0
;	*str -> Y+0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0073         LCD_WriteData(*str++);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0074     }
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0075 }
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;
;void LCD_Init() {
; 0000 0077 void LCD_Init() {
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0078     TWSR = 0x00;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0079     TWBR = 32;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 007A     delay_ms(50);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 007B 
; 0000 007C     LCD_WriteCmd(0x33);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 007D     LCD_WriteCmd(0x32);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 007E     LCD_WriteCmd(0x28);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 007F     LCD_WriteCmd(0x0C);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0080     LCD_WriteCmd(0x06);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0081     LCD_WriteCmd(0x01);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0082     delay_ms(5);
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0083 }
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;
;void LCD_DrawBargraph(float value, float max_value) {
; 0000 0085 void LCD_DrawBargraph(float value, float max_value) {
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0086     uint8_t bar_length = 16;
; 0000 0087     uint8_t filled = 0;
; 0000 0088     uint8_t i;
; 0000 0089 
; 0000 008A     if (value <= 0.0f) {
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;	value -> Y+8
;	max_value -> Y+4
;	bar_length -> R17
;	filled -> R16
;	i -> R19
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 008B         filled = 0; // Empty bar at 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 008C     } else if (value >= max_value) {
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 008D         filled = bar_length; // Full bar at or above max_value
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 008E     } else {
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 008F         filled = (uint8_t)((value / max_value) * bar_length + 0.5f);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0090     }
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0091 
; 0000 0092     for (i = 0; i < bar_length; i++) {
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0093         if (i < filled) LCD_WriteData(0xFF);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0094         else LCD_WriteData(' ');
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0095     }
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0096 }
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;
;void main(void) {
; 0000 0098 void main(void) {
;PCODE: $00000154 VOL: 0
; 0000 0099     char buffer[32];
; 0000 009A     uint16_t adc_val;
; 0000 009B     float rs, rs_r0, ppm, mg_per_l;
; 0000 009C 
; 0000 009D     uart_init();
;PCODE: $00000155 VOL: 0
;	buffer -> Y+16
;	adc_val -> R16,R17
;	rs -> Y+12
;	rs_r0 -> Y+8
;	ppm -> Y+4
;	mg_per_l -> Y+0
;PCODE: $00000156 VOL: 0
; 0000 009E     adc_init();
;PCODE: $00000157 VOL: 0
; 0000 009F     LCD_Init();
;PCODE: $00000158 VOL: 0
; 0000 00A0 
; 0000 00A1     while (1) {
;PCODE: $00000159 VOL: 0
; 0000 00A2         adc_val = adc_read();
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00A3 
; 0000 00A4         if (adc_val == 0) {
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00A5             mg_per_l = 0.0;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00A6         } else {
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00A7             rs = RL_VALUE * ((float)ADC_MAX / adc_val - 1.0);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00A8             rs_r0 = rs / R0_VALUE;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00A9             ppm = pow(rs_r0 / A_CONST, 1.0 / -B_CONST);
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00AA             mg_per_l = ppm * 1.884;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00AB         }
;PCODE: $0000017C VOL: 0
; 0000 00AC 
; 0000 00AD         if (mg_per_l < 0.0) mg_per_l = 0.0;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00AE         if (mg_per_l > 10.0) mg_per_l = 10.0;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00AF 
; 0000 00B0         LCD_Clear();
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00B1         LCD_SetCursor(0, 0);
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00B2         LCD_Print("Alcohol Level:");
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 00B3 
; 0000 00B4         LCD_SetCursor(0, 1);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00B5         LCD_DrawBargraph(mg_per_l, 1.0); // bar max at 1.0mg/L
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 00B6 
; 0000 00B7         sprintf(buffer, "Alcohol: %.2fmg/L\r\n", mg_per_l);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 00B8         uart_print(buffer);
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00B9 
; 0000 00BA         delay_ms(1000);
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00BB     }
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 00BC }
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0

	.DSEG
_0x28:
	.BYTE 0xF
